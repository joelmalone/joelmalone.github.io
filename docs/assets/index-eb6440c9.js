import{A,S as N,c as S,V as n,C as m,P as g}from"./runBabylonPlaygroundScene-32a4afbd.js";import{S as E}from"./waterMaterial-6ce4a3d9.js";import{M as P}from"./meshBuilder-ad173be8.js";import{C as x}from"./cannonJSPlugin-f229288c.js";import{P as u}from"./physicsImpostor-3dac248c.js";import{D as T}from"./directionalLight-d037032f.js";import{C as B}from"./shadowGeneratorSceneComponent-1c2fa54e.js";import{H as L}from"./linesBuilder-a2dae4c1.js";import{A as C,E as M}from"./actionManager-ebe9c8f8.js";import{C as k}from"./cannon-7c309029.js";import"./physicsEngineComponent-f32049b7.js";import"./blurPostProcess-f61d1d3e.js";import"./pbrMaterial-34e2fd30.js";import"./dynamicTexture-7393bdcd.js";window.CANNON=k;function _(r,i){r.enableOfflineSupport=!1,A.AllowMatricesInterpolation=!0;var e=new N(r);const o=new S("Camera",Math.PI/6,Math.PI/4,50,n.Zero(),e);o.setTarget(n.Zero()),e.enablePhysics(null,new x),e.clearColor=m.White().toColor4();const t=P.CreateGround("ground",{width:1e3,height:1e3},e);t.receiveShadows=!0,t.material=new E("groundMat",e),t.physicsImpostor=new u(t,u.BoxImpostor,{mass:0,restitution:.1},e);var s=new T("directionalLight",new n(-1,-1,-1),e);s.position=new n(0,10,0),s.radius=10,s.specular=m.Black();var l=new B(1024,s);l.setDarkness(.9),l.shadowMaxZ=100;var c=new L("hemisphericLight",new n(1,1,1),e);c.intensity=.8,c.specular=m.Black(),G(e,t,l);var a=!1,h=null;e.onPointerObservable.add(O=>{switch(O.type){case g.POINTERDOWN:a=!0;break;case g.POINTERUP:a=!1,h=null;break;case g.POINTERMOVE:if(a){var p=e.pick(e.pointerX,e.pointerY,w=>w===t);const d=p==null?void 0:p.pickedPoint;if(h&&d){const w=d.subtract(h);e.meshes.forEach(f=>{f.position.subtract(d).length()<3&&f.applyImpulse(w.scale(7),f.absolutePosition)})}h=d}break}});function v(){e.debugLayer.show()}function y(){o.attachControl(i,!1)}const b={debug:v,enableCamera:y};return console.debug("hax",b),Object.assign(window,{hax:b}),e}async function G(r,i,e){for(var o=0;o<100;o++){const t=D(r,i);e.addShadowCaster(t.mesh,!0),await I(10)}}function D(r,i){const e=new m;m.HSVtoRGBToRef(Math.random()*360,.5,1,e);const o=P.CreateBox("cube",{size:1,faceColors:[e.toColor4(),e.toColor4(),e.toColor4(),e.toColor4(),e.toColor4(),e.toColor4()]},r);o.receiveShadows=!0,o.position.set(Math.random()*100-50,2,Math.random()*100-50),o.physicsImpostor=new u(o,u.BoxImpostor,{mass:1,restitution:.5},r);function t(a){o.applyImpulse(a.normalize().scale(2),o.getAbsolutePosition().addInPlaceFromFloats(0,.5,0))}const s=[n.Forward(),n.Backward(),n.Left(),n.Right()];async function l(){for(;;){if(c)if(Math.random()<.25){const a=o.position.scale(-1);t(a)}else{const a=s[Math.trunc(Math.random()*s.length)];t(a)}await I(Math.random()*50+50)}}l();var c=!1;return o.actionManager=new C(r),o.actionManager.registerAction(new M({trigger:C.OnIntersectionEnterTrigger,parameter:i},()=>{c=!0})),o.actionManager.registerAction(new M({trigger:C.OnIntersectionExitTrigger,parameter:i},()=>{c=!1})),{mesh:o,move:t}}function I(r){return new Promise(i=>setTimeout(i,r))}export{_ as createScene};

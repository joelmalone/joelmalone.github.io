import{A as x,S as L,H as T,V as g,C as O,D as B,a as K,F as X,P as V,b as H,M as R,O as u,c as y,E as W}from"./index-1765cf1e.js";import"./ExtrasAsMetadata-6a2daf9d.js";const j="/assets/apc-6635a715.glb";function z(s){const l={forward:!1,left:!1,right:!1},n={forward:new u,left:new u,right:new u,all:new u},m={w:"forward",a:"left",d:"right"};return s.actionManager=new y(s),s.actionManager.registerAction(new W(y.OnKeyDownTrigger,function(c){const f=c.sourceEvent,i=m[f.key.toLowerCase()];i&&!l[i]&&(l[i]=!0,n[i].notifyObservers(!0),n.all.notifyObservers(l))})),s.actionManager.registerAction(new W(y.OnKeyUpTrigger,function(c){const f=c.sourceEvent,i=m[f.key.toLowerCase()];i&&l[i]&&(l[i]=!1,n[i].notifyObservers(!1),n.all.notifyObservers(l))})),{...n,destroy:()=>{}}}function q(s,l){s.enableOfflineSupport=!1,x.AllowMatricesInterpolation=!0;var n=new L(s);const m=z(n);var c=new T("light1",new g(0,1,0),n);c.intensity=.6,c.specular=O.Black();var f=new B("dir01",new g(3,-3,1),n);f.position=new g(0,5,5);var i=new K(1024,f);i.useBlurExponentialShadowMap=!0,i.blurKernel=32;const b=new X("camera1",new g,n);b.radius=5,b.heightOffset=1.5;const o=new g;m.all.add(t=>{o.set(0,0,0),t.forward&&o.addInPlaceFromFloats(0,0,1),t.left&&o.addInPlaceFromFloats(-1,0,0),t.right&&o.addInPlaceFromFloats(1,0,0)}),n.onPointerObservable.add(t=>{switch(t.type){case V.POINTERTAP:console.log(t),t.event.clientX<l.clientWidth*.2?o.set(1,0,0):t.event.clientX<l.clientWidth*.4?o.set(1,0,1):t.event.clientX<l.clientWidth*.6?o.set(0,0,1):t.event.clientX<l.clientWidth*.8?o.set(-1,0,1):o.set(-1,0,0)}});const k=n.createDefaultEnvironment({enableGroundShadow:!0});return k.setMainColor(O.Teal()),k.ground.position.y+=.01,H.ImportMesh("",j,"",n,(t,M,C,d,E,I,P)=>{i.addShadowCaster(t[0],!0);const p=d.find(e=>e.name==="Idle"),A=d.find(e=>e.name==="Walking"),h=d.find(e=>e.name==="Left"),w=d.find(e=>e.name==="Right");[p,A,h,w].forEach(e=>{e.setWeightForAllAnimatables(0),e.start(!0)}),[h,w].forEach(e=>{e.syncAllAnimationsWith(A.animatables[0])});const a={idleAnimation:1,walkingAnimation:0,leftAnimation:0,rightAnimation:0},r={idleAnimation:1,walkingAnimation:0,leftAnimation:0,rightAnimation:0},S=["idleAnimation","walkingAnimation","leftAnimation","rightAnimation"];n.onBeforeAnimationsObservable.add(()=>{a.walkingAnimation=o.z>.1?1:1e-6,a.leftAnimation=o.x<-.1?1:0,a.rightAnimation=o.x>.1?1:0,a.idleAnimation=a.walkingAnimation==1e-6&&a.leftAnimation==0&&a.rightAnimation==0?1:0;for(const e of S)r[e]<a[e]?(r[e]+=.1,r[e]>a[e]&&(r[e]=a[e])):r[e]>a[e]&&(r[e]-=.1,r[e]<a[e]&&(r[e]=a[e]));p.setWeightForAllAnimatables(r.idleAnimation),A.setWeightForAllAnimatables(r.walkingAnimation),h.setWeightForAllAnimatables(r.leftAnimation),w.setWeightForAllAnimatables(r.rightAnimation)});const F=new R("dummy",n,t[0]);F.position.addInPlaceFromFloats(0,1,0),b.lockedTarget=F;const v={idleAnimation:p,walkingAnimation:A,leftAnimation:h,rightAnimation:w,meshes:t,particleSystems:M,skeletons:C,animationGroups:d,transformNodes:E,geometries:I,lights:P};console.debug("hax",v),Object.assign(window,{hax:v})},function(){}),n}export{q as createScene};
